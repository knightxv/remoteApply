declare namespace BFS {
    interface KeyPair {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    }

    interface CryptoInterface {
        // get 32 random bytes for keypair seed
        seed(): Uint8Array;
        // generate keypair from seed, if seed is not provided, will generate a random one by seed()
        keyPair(seed: Uint8Array | undefined): KeyPair;
        // The secret key must have been generated by keyPair()
        fromSecretKey(secretKey: Uint8Array): KeyPair;
        // sign message, return message signature, throw error if secretKey is invalid
        sign(message: Uint8Array, secretKey: Uint8Array): Uint8Array;
        // verify message
        verify(message: Uint8Array, sigature: Uint8Array, publicKey: Uint8Array): boolean;
        // verify signature
        verifySignature(sigature: Uint8Array, publicKey: Uint8Array): boolean;
        // encrypt message, return ciphertext, throw error if keys are not valid
        encryptSign(data: Uint8Array, publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array;
        // decrypt message, return plaintext, throw error if failed
        decrypt(data: Uint8Array, publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array;
    }
}